{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KDetSim Documentation! WIP","title":"KDetSim Documentation!"},{"location":"#kdetsim-documentation","text":"WIP","title":"KDetSim Documentation!"},{"location":"KDetector/","text":"KDetector This page contains the KDetector class that other classes such as KPad , KPixel , K3D , and KStrip are derived from. This contains methods related to field calculation, drift simulation, visualization, and IO.","title":"KDetector"},{"location":"KDetector/#kdetector","text":"This page contains the KDetector class that other classes such as KPad , KPixel , K3D , and KStrip are derived from. This contains methods related to field calculation, drift simulation, visualization, and IO.","title":"KDetector"},{"location":"KGeometry/","text":"KGeometry Class Attributes This page contains the KGeometry class, which describes the various shapes that electrodes can take on, as well as the boundary conditions. TH3I EG - describes the size and number of divisions of the electrode geometry in three dimensions in a root histogram class This 3D histogram can later be populated by information, such as the voltage boundary conditions. TH3I DM - similar to EG , except it is a histogram that describes the material of the detector. Int_t nx,ny,nz - describes the number of x,y,z respectively. Class Methods GetGrid The function void GetGrid( TH3I *x, Short_t which ) takes in a pointer to a 3D histogram, and a variable which , which decides whether to x to EG or DM by the following rule: which=0 copies x to EG which=1 copies x to DM Reset The function void Reset( Int_t Which, Int_t What) resets all bins in either EG or DM , determined by the variable which as described above, to a default value of What. SetBoundaryConditions The function Int_t SetboundaryConditions() sets up the boundary conditions by looping through all cells in EG and depending on their location, encodes information regarding their boundary condition if applicable. Returns 0. MapToGeometry The function TH3D MapToGeometry(Double_t *x, Double_t Scale) takes in a one-dimensional vector x (which has size n_xn_yn_z ) and returns the vector in the form of a histogram. The variable Scale tells us how much the parameters should be scaled by. GetStepSize The function Double_t GetStepSize(Int_t dir, Float_t x) gets the step size of EG in a specific direction dir and at a specific location on the axis at x . The possible values of dir are: dir=0 : X-axis dir=1 : Y-axis dir=2 : Z-Axis default: X-axis GetLowEdge and GetUpEdge The functions Float_t GetLowEdge(Int_t dir) and GetUpEdge(Int_t dir) returns the edge of EG in a certain direction dir , defined in the same way as above.","title":"KGeometry"},{"location":"KGeometry/#kgeometry","text":"","title":"KGeometry"},{"location":"KGeometry/#class-attributes","text":"This page contains the KGeometry class, which describes the various shapes that electrodes can take on, as well as the boundary conditions. TH3I EG - describes the size and number of divisions of the electrode geometry in three dimensions in a root histogram class This 3D histogram can later be populated by information, such as the voltage boundary conditions. TH3I DM - similar to EG , except it is a histogram that describes the material of the detector. Int_t nx,ny,nz - describes the number of x,y,z respectively.","title":"Class Attributes"},{"location":"KGeometry/#class-methods","text":"","title":"Class Methods"},{"location":"KGeometry/#getgrid","text":"The function void GetGrid( TH3I *x, Short_t which ) takes in a pointer to a 3D histogram, and a variable which , which decides whether to x to EG or DM by the following rule: which=0 copies x to EG which=1 copies x to DM","title":"GetGrid"},{"location":"KGeometry/#reset","text":"The function void Reset( Int_t Which, Int_t What) resets all bins in either EG or DM , determined by the variable which as described above, to a default value of What.","title":"Reset"},{"location":"KGeometry/#setboundaryconditions","text":"The function Int_t SetboundaryConditions() sets up the boundary conditions by looping through all cells in EG and depending on their location, encodes information regarding their boundary condition if applicable. Returns 0.","title":"SetBoundaryConditions"},{"location":"KGeometry/#maptogeometry","text":"The function TH3D MapToGeometry(Double_t *x, Double_t Scale) takes in a one-dimensional vector x (which has size n_xn_yn_z ) and returns the vector in the form of a histogram. The variable Scale tells us how much the parameters should be scaled by.","title":"MapToGeometry"},{"location":"KGeometry/#getstepsize","text":"The function Double_t GetStepSize(Int_t dir, Float_t x) gets the step size of EG in a specific direction dir and at a specific location on the axis at x . The possible values of dir are: dir=0 : X-axis dir=1 : Y-axis dir=2 : Z-Axis default: X-axis","title":"GetStepSize"},{"location":"KGeometry/#getlowedge-and-getupedge","text":"The functions Float_t GetLowEdge(Int_t dir) and GetUpEdge(Int_t dir) returns the edge of EG in a certain direction dir , defined in the same way as above.","title":"GetLowEdge and GetUpEdge"},{"location":"KMaterial/","text":"KMaterial This page contains functions and the KMaterial class that describes the properties of various materials. Helper Functions Refer to this for background information. The gain factor, or multiplication coefficient \\(M(x)\\) corresponds to the total number of electron-hole pairs created in the depletion region by a single electron-hole pair generated at a distance \\(x\\) : \\[M(x) = \\frac{\\exp(I)}{1-\\int_x^W \\alpha_p \\exp(I) \\text{ dx}}\\] with \\(I=\\int_0^x \\alpha_n M(x) \\text{ dx}\\) . Here, \\(\\alpha_n\\) and \\(\\alpha_p\\) are the ionization coefficients. KM The function Double_t KAlpha(Double_t E, Short_t Charg, Int_t which) determines the ionization coefficients for an electric field E , a charge Charg , and a material described by which . Double_t E - electric field with units \\(\\mathrm{V/\\mu m}\\) . Short_t Charge Either \\(1\\) for holes or \\(-1\\) for electrons. Int_t which Currently, data for the following materials are available: Silicon: 0 Diamond (Trew): 10 Diamond (Watanabe): 11 Diamond (Hiraiwa): 12 KAlpha The function Double_t KM(TH1D *his, Float_t Start, Short_t Rev) determines the number of electron-hole pairs generated at the point Start given the electric field profile his . This is also known as the gain factor . TH1D *his - electric field profile, given as a root histogram class . Float_t Start - creation point of the e-h pair for multiplication junction Start=0; the opposite side of the junction Start=thickness; Short_t Rev - in the calculation it is assumed that electrons drift in the high field region ( Rev=0 ). If the holes drift then Rev=1 ; Class Attributes The KMaterial class does not contain any private variables. It contains the following public variables: Int_t Mat Material Index (default: 1) Silicon: 0 Poly Silicon: 1 Silicon Oxide: 2 Diamond: 10 Air: 20 Aluminum: 100 Float_t Temperature Temperature in Kelvin (default: 293) Mobility Mobility Model (default: 1) Canali: 1 Scharf: 3 Jacoboni: 4 Int_t ImpactIonization Impact Ionization Coefficient (default: 0) Class Methods Perm The function Float_t Perm(Int_t Material) determines the relative permeability \\(\\epsilon_r\\) of the material depending on the value of Mat. MobMod The function Int_t MobMod determines the mode of mobility depending on Mat and Mobility. Note that Mobility is only taken into account if the material is silicon. dEX The function Float_t dEX(Double_t E, Double_t *x, Double_t *y, Double_t eps) is not used by anything else. dEdx The function Float_t dEDx(Double_t E) is not used by anything else.","title":"KMaterial"},{"location":"KMaterial/#kmaterial","text":"This page contains functions and the KMaterial class that describes the properties of various materials.","title":"KMaterial"},{"location":"KMaterial/#helper-functions","text":"Refer to this for background information. The gain factor, or multiplication coefficient \\(M(x)\\) corresponds to the total number of electron-hole pairs created in the depletion region by a single electron-hole pair generated at a distance \\(x\\) : \\[M(x) = \\frac{\\exp(I)}{1-\\int_x^W \\alpha_p \\exp(I) \\text{ dx}}\\] with \\(I=\\int_0^x \\alpha_n M(x) \\text{ dx}\\) . Here, \\(\\alpha_n\\) and \\(\\alpha_p\\) are the ionization coefficients.","title":"Helper Functions"},{"location":"KMaterial/#km","text":"The function Double_t KAlpha(Double_t E, Short_t Charg, Int_t which) determines the ionization coefficients for an electric field E , a charge Charg , and a material described by which . Double_t E - electric field with units \\(\\mathrm{V/\\mu m}\\) . Short_t Charge Either \\(1\\) for holes or \\(-1\\) for electrons. Int_t which Currently, data for the following materials are available: Silicon: 0 Diamond (Trew): 10 Diamond (Watanabe): 11 Diamond (Hiraiwa): 12","title":"KM"},{"location":"KMaterial/#kalpha","text":"The function Double_t KM(TH1D *his, Float_t Start, Short_t Rev) determines the number of electron-hole pairs generated at the point Start given the electric field profile his . This is also known as the gain factor . TH1D *his - electric field profile, given as a root histogram class . Float_t Start - creation point of the e-h pair for multiplication junction Start=0; the opposite side of the junction Start=thickness; Short_t Rev - in the calculation it is assumed that electrons drift in the high field region ( Rev=0 ). If the holes drift then Rev=1 ;","title":"KAlpha"},{"location":"KMaterial/#class-attributes","text":"The KMaterial class does not contain any private variables. It contains the following public variables: Int_t Mat Material Index (default: 1) Silicon: 0 Poly Silicon: 1 Silicon Oxide: 2 Diamond: 10 Air: 20 Aluminum: 100 Float_t Temperature Temperature in Kelvin (default: 293) Mobility Mobility Model (default: 1) Canali: 1 Scharf: 3 Jacoboni: 4 Int_t ImpactIonization Impact Ionization Coefficient (default: 0)","title":"Class Attributes"},{"location":"KMaterial/#class-methods","text":"","title":"Class Methods"},{"location":"KMaterial/#perm","text":"The function Float_t Perm(Int_t Material) determines the relative permeability \\(\\epsilon_r\\) of the material depending on the value of Mat.","title":"Perm"},{"location":"KMaterial/#mobmod","text":"The function Int_t MobMod determines the mode of mobility depending on Mat and Mobility. Note that Mobility is only taken into account if the material is silicon.","title":"MobMod"},{"location":"KMaterial/#dex","text":"The function Float_t dEX(Double_t E, Double_t *x, Double_t *y, Double_t eps) is not used by anything else.","title":"dEX"},{"location":"KMaterial/#dedx","text":"The function Float_t dEDx(Double_t E) is not used by anything else.","title":"dEdx"}]}